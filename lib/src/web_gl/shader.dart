part of web_gl;

/// Programmable stage of the rendering pipeline.
///
/// WebGL shaders are written in the [OpenGL Shading Language for Embedded
/// Systems (GLSL ES) version 1.0](https://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf).
/// The following shader types are available in WebGL:
///
/// - [VertexShader]: handles the processing of individual vertices. See the
///   documentation for [VertexShader] for details.
/// - [FragmentShader]: processes fragments generated by rasterization. See the
///   documentation for [FragmentShader] for details.
///
/// Shaders are linked into a [Program].
abstract class Shader {
  /// The [RenderingContext] for which this [Shader] is compiled.
  RenderingContext get context;

  /// The source code for this [Shader].
  String get source;
}

/// The programmable stage in the rendering pipeline that handles the processing
/// of individual vertices.
class VertexShader extends Shader {
  final RenderingContext context;

  final String source;

  WebGL.Shader _shader;

  /// Instantiates a new [VertexShader] for the given [context] by compiling
  /// the [source] string.
  ///
  /// Throws a [ShaderCompilationError] if the shader fails to compile.
  VertexShader(this.context, this.source) {
    _shader = context._context.createShader(WebGL.VERTEX_SHADER);

    context._context.shaderSource(_shader, source);
    context._context.compileShader(_shader);

    final success =
        context._context.getShaderParameter(_shader, WebGL.COMPILE_STATUS);

    if (!success) {
      throw new ShaderCompilationError(WebGL.VERTEX_SHADER, source,
          context._context.getShaderInfoLog(_shader));
    }
  }
}

/// The programmable stage in the rendering pipeline that handles the processing
/// of individual fragments generated by rasterization.
class FragmentShader extends Shader {
  final RenderingContext context;

  final String source;

  WebGL.Shader _shader;

  /// Instantiates a new [FragmentShader] for the given [context] by compiling
  /// the [source] string.
  ///
  /// Throws a [ShaderCompilationError] if the shader fails to compile.
  FragmentShader(this.context, this.source) {
    _shader = context._context.createShader(WebGL.FRAGMENT_SHADER);

    context._context.shaderSource(_shader, source);
    context._context.compileShader(_shader);

    final success =
        context._context.getShaderParameter(_shader, WebGL.COMPILE_STATUS);

    if (!success) {
      throw new ShaderCompilationError(WebGL.FRAGMENT_SHADER, source,
          context._context.getShaderInfoLog(_shader));
    }
  }
}
